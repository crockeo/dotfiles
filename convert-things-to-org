#!/usr/bin/env python3.10
from __future__ import annotations

import sqlite3
import sys
import textwrap
from typing import Any
from dataclasses import dataclass
from dataclasses import field
from pathlib import Path

THINGS_DB_PATH = (
    Path.home()
    / "Library"
    / "Group Containers"
    / "JLMPQHK86H.com.culturedcode.ThingsMac"
    / "Things Database.thingsdatabase"
    / "main.sqlite"
)


def get_columns(cursor: sqlite3.Cursor) -> list[str]:
    columns = []
    for column_description in cursor.description:
        columns.append(column_description[0])
    return columns


def load_tasks_raw(conn: sqlite3.Connection, sql: str, parameters: tuple[Any, ...]) -> list[Task]:
    cursor = conn.execute(sql, parameters)
    columns = get_columns(cursor)
    tasks = []
    for row in cursor:
        structured_row = {}
        for i, column in enumerate(row):
            structured_row[columns[i]] = column
        tasks.append(Task(**structured_row))
    return tasks


@dataclass
class Task:
    # TODO: convert some of these from unstructured to structured
    uuid: Any
    userModificationDate: Any
    creationDate: Any
    trashed: int
    type: Any
    title: str
    notes: str
    dueDate: Any
    dueDateOffset: Any
    status: Any
    stopDate: Any
    start: Any
    startDate: Any
    index: Any
    todayIndex: Any
    area: Any
    project: Any
    repeatingTemplate: Any
    delegate: Any
    recurrenceRule: Any
    instanceCreationStartDate: Any
    instanceCreationPaused: Any
    instanceCreationCount: Any
    afterCompletionReferenceDate: Any
    actionGroup: Any
    untrashedLeafActionsCount: Any
    openUntrashedLeafActionsCount: Any
    checklistItemsCount: Any
    openChecklistItemsCount: Any
    startBucket: Any
    alarmTimeOffset: Any
    lastAlarmInteractionDate: Any
    todayIndexReferenceDate: Any
    nextInstanceStartDate: Any
    dueDateSuppressionDate: Any
    leavesTombstone: Any
    repeater: Any
    repeaterMigrationDate: Any
    repeaterRegularSlotDatesCache: Any
    notesSync: Any
    cachedTags: Any

    sub_tasks: list[Task] = field(default_factory=list)

    @staticmethod
    def load(conn: sqlite3.Connection, uuid: str) -> Task:
        tasks = load_tasks_raw(
            conn,
            textwrap.dedent("""\
                SELECT *
                FROM TMTask
                WHERE uuid = ?
                ORDER BY "index" ASC
            """),
            (uuid,),
        )
        if len(tasks) != 1:
            raise Exception(f"failed to find task with uuid {uuid}")
        task = tasks[0]
        task.sub_tasks = task.load_subtasks(conn)
        return task

    def load_subtasks(self, conn: sqlite3.Connection) -> list[Task]:
        tasks = load_tasks_raw(
            conn,
            textwrap.dedent("""\
                SELECT *
                FROM TMTask
                WHERE project = ? OR actionGroup = ?
                ORDER BY "index" ASC
            """),
            (self.uuid, self.uuid),
        )
        for task in tasks:
            task.sub_tasks = task.load_subtasks(conn)
        return tasks

    def render_to_org(self, *, indent_level: int = 1) -> str:
        headline_indent = "*" * indent_level
        self_contents = f"{headline_indent} {self.title}"
        if self.notes:
            self_contents = f"{self_contents}\n{self.notes}"
        sub_task_contents = [
            sub_task.render_to_org(indent_level=indent_level + 1)
            for sub_task in self.sub_tasks
        ]
        return "\n".join([
            self_contents,
            *sub_task_contents,
        ])


def main(args: list[str]) -> None:
    if not THINGS_DB_PATH.exists():
        raise SystemExit("Things3 DB does not exist.")

    if len(args) != 2:
        raise SystemExit("Usage: convert-things-to-org <things URL>")

    things_uuid = args[1]
    things_uuid = things_uuid[len("things:///show?id="):]

    with sqlite3.connect(THINGS_DB_PATH) as conn:
        task = Task.load(conn, things_uuid)
    print(task.render_to_org())


if __name__ == "__main__":
    main(sys.argv)
